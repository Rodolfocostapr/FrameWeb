/**
 *
 * $Id$
 */
package uml2.validation;

import org.eclipse.emf.common.util.EList;

import uml2.AggregationKind;
import uml2.Association;
import uml2.DataType;
import uml2.Interface;
import uml2.Property;
import uml2.ValueSpecification;

/**
 * A sample validator interface for {@link uml2.Property}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface PropertyValidator {
	boolean validate();

	boolean validateDatatype(DataType value);
	boolean validateInterface(Interface value);
	boolean validateAggregation(AggregationKind value);
	boolean validateAssociation(Association value);
	boolean validateOwningAssociation(Association value);
	boolean validateAssociationEnd(Property value);
	boolean validateQualifier(EList<Property> value);
	boolean validateClass(uml2.Class value);
	boolean validateDefault(String value);
	boolean validateDefaultValue(ValueSpecification value);
	boolean validateIsComposite(Boolean value);
	boolean validateIsDerived(Boolean value);
	boolean validateIsDerivedUnion(Boolean value);
	boolean validateIsId(Boolean value);
	boolean validateOpposite(Property value);
	boolean validateRedefinedProperty(EList<Property> value);
	boolean validateSubsettedProperty(EList<Property> value);
}
