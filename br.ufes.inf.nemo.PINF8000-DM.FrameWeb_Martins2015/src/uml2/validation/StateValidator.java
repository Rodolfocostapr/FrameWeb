/**
 *
 * $Id$
 */
package uml2.validation;

import org.eclipse.emf.common.util.EList;

import uml2.Behavior;
import uml2.ConnectionPointReference;
import uml2.Constraint;
import uml2.Pseudostate;
import uml2.Region;
import uml2.State;
import uml2.StateMachine;
import uml2.Trigger;

/**
 * A sample validator interface for {@link uml2.State}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface StateValidator {
	boolean validate();

	boolean validateConnection(EList<ConnectionPointReference> value);
	boolean validateConnectionPoint(EList<Pseudostate> value);
	boolean validateDeferrableTrigger(EList<Trigger> value);
	boolean validateDoActivity(Behavior value);
	boolean validateEntry(Behavior value);
	boolean validateExit(Behavior value);
	boolean validateIsComposite(Boolean value);
	boolean validateIsOrthogonal(Boolean value);
	boolean validateIsSimple(Boolean value);
	boolean validateIsSubmachineState(Boolean value);
	boolean validateRedefinedState(State value);
	boolean validateStateInvariant(Constraint value);
	boolean validateSubmachine(StateMachine value);
	boolean validateRegion(EList<Region> value);
}
