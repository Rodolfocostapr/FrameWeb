/**
 */
package frameweb.provider;

import frameweb.util.FramewebAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FramewebItemProviderAdapterFactory extends FramewebAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FramewebItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Frameweb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FramewebItemProvider framewebItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Frameweb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFramewebAdapter() {
		if (framewebItemProvider == null) {
			framewebItemProvider = new FramewebItemProvider(this);
		}

		return framewebItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Framework} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrameworkItemProvider frameworkItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Framework}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrameworkAdapter() {
		if (frameworkItemProvider == null) {
			frameworkItemProvider = new FrameworkItemProvider(this);
		}

		return frameworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelItemProvider domainModelItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelAdapter() {
		if (domainModelItemProvider == null) {
			domainModelItemProvider = new DomainModelItemProvider(this);
		}

		return domainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.NavigationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationModelItemProvider navigationModelItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.NavigationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationModelAdapter() {
		if (navigationModelItemProvider == null) {
			navigationModelItemProvider = new NavigationModelItemProvider(this);
		}

		return navigationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ApplicationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationModelItemProvider applicationModelItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ApplicationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationModelAdapter() {
		if (applicationModelItemProvider == null) {
			applicationModelItemProvider = new ApplicationModelItemProvider(this);
		}

		return applicationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.PersistenceModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistenceModelItemProvider persistenceModelItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.PersistenceModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistenceModelAdapter() {
		if (persistenceModelItemProvider == null) {
			persistenceModelItemProvider = new PersistenceModelItemProvider(this);
		}

		return persistenceModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainAssociationItemProvider domainAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAssociationAdapter() {
		if (domainAssociationItemProvider == null) {
			domainAssociationItemProvider = new DomainAssociationItemProvider(this);
		}

		return domainAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.VersionAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionAttributeItemProvider versionAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.VersionAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAttributeAdapter() {
		if (versionAttributeItemProvider == null) {
			versionAttributeItemProvider = new VersionAttributeItemProvider(this);
		}

		return versionAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.IdAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdAttributeItemProvider idAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.IdAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdAttributeAdapter() {
		if (idAttributeItemProvider == null) {
			idAttributeItemProvider = new IdAttributeItemProvider(this);
		}

		return idAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.LOBAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LOBAttributeItemProvider lobAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.LOBAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLOBAttributeAdapter() {
		if (lobAttributeItemProvider == null) {
			lobAttributeItemProvider = new LOBAttributeItemProvider(this);
		}

		return lobAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.EmbeddedAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmbeddedAttributeItemProvider embeddedAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.EmbeddedAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmbeddedAttributeAdapter() {
		if (embeddedAttributeItemProvider == null) {
			embeddedAttributeItemProvider = new EmbeddedAttributeItemProvider(this);
		}

		return embeddedAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DecimalAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecimalAttributeItemProvider decimalAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DecimalAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecimalAttributeAdapter() {
		if (decimalAttributeItemProvider == null) {
			decimalAttributeItemProvider = new DecimalAttributeItemProvider(this);
		}

		return decimalAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DateTimeAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimeAttributeItemProvider dateTimeAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DateTimeAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimeAttributeAdapter() {
		if (dateTimeAttributeItemProvider == null) {
			dateTimeAttributeItemProvider = new DateTimeAttributeItemProvider(this);
		}

		return dateTimeAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Template} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateItemProvider templateItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Template}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAdapter() {
		if (templateItemProvider == null) {
			templateItemProvider = new TemplateItemProvider(this);
		}

		return templateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOInterfaceItemProvider daoInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOInterfaceAdapter() {
		if (daoInterfaceItemProvider == null) {
			daoInterfaceItemProvider = new DAOInterfaceItemProvider(this);
		}

		return daoInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOClassItemProvider daoClassItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOClassAdapter() {
		if (daoClassItemProvider == null) {
			daoClassItemProvider = new DAOClassItemProvider(this);
		}

		return daoClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAORealization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAORealizationItemProvider daoRealizationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAORealization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAORealizationAdapter() {
		if (daoRealizationItemProvider == null) {
			daoRealizationItemProvider = new DAORealizationItemProvider(this);
		}

		return daoRealizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.FrontControllerClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrontControllerClassItemProvider frontControllerClassItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.FrontControllerClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrontControllerClassAdapter() {
		if (frontControllerClassItemProvider == null) {
			frontControllerClassItemProvider = new FrontControllerClassItemProvider(this);
		}

		return frontControllerClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.IOParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IOParameterItemProvider ioParameterItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.IOParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIOParameterAdapter() {
		if (ioParameterItemProvider == null) {
			ioParameterItemProvider = new IOParameterItemProvider(this);
		}

		return ioParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ResultDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultDependencyItemProvider resultDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ResultDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultDependencyAdapter() {
		if (resultDependencyItemProvider == null) {
			resultDependencyItemProvider = new ResultDependencyItemProvider(this);
		}

		return resultDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.NavigationAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationAssociationItemProvider navigationAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.NavigationAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationAssociationAdapter() {
		if (navigationAssociationItemProvider == null) {
			navigationAssociationItemProvider = new NavigationAssociationItemProvider(this);
		}

		return navigationAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.FrontControllerMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrontControllerMethodItemProvider frontControllerMethodItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.FrontControllerMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrontControllerMethodAdapter() {
		if (frontControllerMethodItemProvider == null) {
			frontControllerMethodItemProvider = new FrontControllerMethodItemProvider(this);
		}

		return frontControllerMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceClassItemProvider serviceClassItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceClassAdapter() {
		if (serviceClassItemProvider == null) {
			serviceClassItemProvider = new ServiceClassItemProvider(this);
		}

		return serviceClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceInterfaceItemProvider serviceInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceInterfaceAdapter() {
		if (serviceInterfaceItemProvider == null) {
			serviceInterfaceItemProvider = new ServiceInterfaceItemProvider(this);
		}

		return serviceInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceGeneralizationItemProvider serviceGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceGeneralizationAdapter() {
		if (serviceGeneralizationItemProvider == null) {
			serviceGeneralizationItemProvider = new ServiceGeneralizationItemProvider(this);
		}

		return serviceGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceNavigationAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceNavigationAssociationItemProvider serviceNavigationAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceNavigationAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceNavigationAssociationAdapter() {
		if (serviceNavigationAssociationItemProvider == null) {
			serviceNavigationAssociationItemProvider = new ServiceNavigationAssociationItemProvider(this);
		}

		return serviceNavigationAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ClassMappingKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainClassItemProvider domainClassItemProvider;

	/**
	 * This creates an adapter for a {@link ClassMappingKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainClassAdapter() {
		if (domainClassItemProvider == null) {
			domainClassItemProvider = new DomainClassItemProvider(this);
		}

		return domainClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ConstantName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantNameItemProvider constantNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ConstantName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantNameAdapter() {
		if (constantNameItemProvider == null) {
			constantNameItemProvider = new ConstantNameItemProvider(this);
		}

		return constantNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainTableName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainTableNameItemProvider domainTableNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainTableName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainTableNameAdapter() {
		if (domainTableNameItemProvider == null) {
			domainTableNameItemProvider = new DomainTableNameItemProvider(this);
		}

		return domainTableNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.FrameWorkName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrameWorkNameItemProvider frameWorkNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.FrameWorkName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrameWorkNameAdapter() {
		if (frameWorkNameItemProvider == null) {
			frameWorkNameItemProvider = new FrameWorkNameItemProvider(this);
		}

		return frameWorkNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainColumnName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainColumnNameItemProvider domainColumnNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainColumnName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainColumnNameAdapter() {
		if (domainColumnNameItemProvider == null) {
			domainColumnNameItemProvider = new DomainColumnNameItemProvider(this);
		}

		return domainColumnNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOInterfaceName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOInterfaceNameItemProvider daoInterfaceNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOInterfaceName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOInterfaceNameAdapter() {
		if (daoInterfaceNameItemProvider == null) {
			daoInterfaceNameItemProvider = new DAOInterfaceNameItemProvider(this);
		}

		return daoInterfaceNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOClassName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOClassNameItemProvider daoClassNameItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOClassName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOClassNameAdapter() {
		if (daoClassNameItemProvider == null) {
			daoClassNameItemProvider = new DAOClassNameItemProvider(this);
		}

		return daoClassNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ResultType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultItemProvider resultItemProvider;

	/**
	 * This creates an adapter for a {@link ResultType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultAdapter() {
		if (resultItemProvider == null) {
			resultItemProvider = new ResultItemProvider(this);
		}

		return resultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.FrontControllerDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrontControllerDependencyItemProvider frontControllerDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.FrontControllerDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrontControllerDependencyAdapter() {
		if (frontControllerDependencyItemProvider == null) {
			frontControllerDependencyItemProvider = new FrontControllerDependencyItemProvider(this);
		}

		return frontControllerDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.PageDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageDependencyItemProvider pageDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.PageDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageDependencyAdapter() {
		if (pageDependencyItemProvider == null) {
			pageDependencyItemProvider = new PageDependencyItemProvider(this);
		}

		return pageDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ChainingDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainingDependencyItemProvider chainingDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ChainingDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainingDependencyAdapter() {
		if (chainingDependencyItemProvider == null) {
			chainingDependencyItemProvider = new ChainingDependencyItemProvider(this);
		}

		return chainingDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOServiceAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOServiceAssociationItemProvider daoServiceAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOServiceAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOServiceAssociationAdapter() {
		if (daoServiceAssociationItemProvider == null) {
			daoServiceAssociationItemProvider = new DAOServiceAssociationItemProvider(this);
		}

		return daoServiceAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainMethodItemProvider domainMethodItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainMethodAdapter() {
		if (domainMethodItemProvider == null) {
			domainMethodItemProvider = new DomainMethodItemProvider(this);
		}

		return domainMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOAttributeItemProvider daoAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOAttributeAdapter() {
		if (daoAttributeItemProvider == null) {
			daoAttributeItemProvider = new DAOAttributeItemProvider(this);
		}

		return daoAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceOperationItemProvider serviceOperationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceOperationAdapter() {
		if (serviceOperationItemProvider == null) {
			serviceOperationItemProvider = new ServiceOperationItemProvider(this);
		}

		return serviceOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ServiceAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceAttributeItemProvider serviceAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ServiceAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAttributeAdapter() {
		if (serviceAttributeItemProvider == null) {
			serviceAttributeItemProvider = new ServiceAttributeItemProvider(this);
		}

		return serviceAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOMethodItemProvider daoMethodItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOMethodAdapter() {
		if (daoMethodItemProvider == null) {
			daoMethodItemProvider = new DAOMethodItemProvider(this);
		}

		return daoMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainPackageItemProvider domainPackageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainPackageAdapter() {
		if (domainPackageItemProvider == null) {
			domainPackageItemProvider = new DomainPackageItemProvider(this);
		}

		return domainPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ViewPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewPackageItemProvider viewPackageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ViewPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewPackageAdapter() {
		if (viewPackageItemProvider == null) {
			viewPackageItemProvider = new ViewPackageItemProvider(this);
		}

		return viewPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ControllerPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerPackageItemProvider controllerPackageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ControllerPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerPackageAdapter() {
		if (controllerPackageItemProvider == null) {
			controllerPackageItemProvider = new ControllerPackageItemProvider(this);
		}

		return controllerPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.PersistencePackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistencePackageItemProvider persistencePackageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.PersistencePackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistencePackageAdapter() {
		if (persistencePackageItemProvider == null) {
			persistencePackageItemProvider = new PersistencePackageItemProvider(this);
		}

		return persistencePackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ApplicationPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationPackageItemProvider applicationPackageItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ApplicationPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationPackageAdapter() {
		if (applicationPackageItemProvider == null) {
			applicationPackageItemProvider = new ApplicationPackageItemProvider(this);
		}

		return applicationPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIComponentItemProvider uiComponentItemProvider;

	/**
	 * This creates an adapter for a {@link Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIComponentAdapter() {
		if (uiComponentItemProvider == null) {
			uiComponentItemProvider = new UIComponentItemProvider(this);
		}

		return uiComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ResultType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultTypeItemProvider resultTypeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ResultType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultTypeAdapter() {
		if (resultTypeItemProvider == null) {
			resultTypeItemProvider = new ResultTypeItemProvider(this);
		}

		return resultTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainGeneralizationItemProvider domainGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainGeneralizationAdapter() {
		if (domainGeneralizationItemProvider == null) {
			domainGeneralizationItemProvider = new DomainGeneralizationItemProvider(this);
		}

		return domainGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.JQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JQueryItemProvider jQueryItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.JQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJQueryAdapter() {
		if (jQueryItemProvider == null) {
			jQueryItemProvider = new JQueryItemProvider(this);
		}

		return jQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.TagLib} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagLibItemProvider tagLibItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.TagLib}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagLibAdapter() {
		if (tagLibItemProvider == null) {
			tagLibItemProvider = new TagLibItemProvider(this);
		}

		return tagLibItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.Anotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnotationItemProvider anotationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.Anotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnotationAdapter() {
		if (anotationItemProvider == null) {
			anotationItemProvider = new AnotationItemProvider(this);
		}

		return anotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.NavigationCompositionPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationCompositionPartItemProvider navigationCompositionPartItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.NavigationCompositionPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationCompositionPartAdapter() {
		if (navigationCompositionPartItemProvider == null) {
			navigationCompositionPartItemProvider = new NavigationCompositionPartItemProvider(this);
		}

		return navigationCompositionPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.NavigationCompositionWhole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationCompositionWholeItemProvider navigationCompositionWholeItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.NavigationCompositionWhole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationCompositionWholeAdapter() {
		if (navigationCompositionWholeItemProvider == null) {
			navigationCompositionWholeItemProvider = new NavigationCompositionWholeItemProvider(this);
		}

		return navigationCompositionWholeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ResultSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultSetItemProvider resultSetItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ResultSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultSetAdapter() {
		if (resultSetItemProvider == null) {
			resultSetItemProvider = new ResultSetItemProvider(this);
		}

		return resultSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.PageConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageConstraintItemProvider pageConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.PageConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageConstraintAdapter() {
		if (pageConstraintItemProvider == null) {
			pageConstraintItemProvider = new PageConstraintItemProvider(this);
		}

		return pageConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ResultConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultConstraintItemProvider resultConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ResultConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultConstraintAdapter() {
		if (resultConstraintItemProvider == null) {
			resultConstraintItemProvider = new ResultConstraintItemProvider(this);
		}

		return resultConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.MethodCosntraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodCosntraintItemProvider methodCosntraintItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.MethodCosntraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodCosntraintAdapter() {
		if (methodCosntraintItemProvider == null) {
			methodCosntraintItemProvider = new MethodCosntraintItemProvider(this);
		}

		return methodCosntraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ChainingConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainingConstraintItemProvider chainingConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ChainingConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainingConstraintAdapter() {
		if (chainingConstraintItemProvider == null) {
			chainingConstraintItemProvider = new ChainingConstraintItemProvider(this);
		}

		return chainingConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.NavigationGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationGeneralizationItemProvider navigationGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.NavigationGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationGeneralizationAdapter() {
		if (navigationGeneralizationItemProvider == null) {
			navigationGeneralizationItemProvider = new NavigationGeneralizationItemProvider(this);
		}

		return navigationGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainConstraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainConstraintsItemProvider domainConstraintsItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainConstraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainConstraintsAdapter() {
		if (domainConstraintsItemProvider == null) {
			domainConstraintsItemProvider = new DomainConstraintsItemProvider(this);
		}

		return domainConstraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DomainProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainPropertyItemProvider domainPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DomainProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainPropertyAdapter() {
		if (domainPropertyItemProvider == null) {
			domainPropertyItemProvider = new DomainPropertyItemProvider(this);
		}

		return domainPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.DAOGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAOGeneralizationItemProvider daoGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.DAOGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAOGeneralizationAdapter() {
		if (daoGeneralizationItemProvider == null) {
			daoGeneralizationItemProvider = new DAOGeneralizationItemProvider(this);
		}

		return daoGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.MappingSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingSetItemProvider mappingSetItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.MappingSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingSetAdapter() {
		if (mappingSetItemProvider == null) {
			mappingSetItemProvider = new MappingSetItemProvider(this);
		}

		return mappingSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.ClassMappingKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassMappingKindItemProvider classMappingKindItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.ClassMappingKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassMappingKindAdapter() {
		if (classMappingKindItemProvider == null) {
			classMappingKindItemProvider = new ClassMappingKindItemProvider(this);
		}

		return classMappingKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link frameweb.AttributeMappingKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeMappingKindItemProvider attributeMappingKindItemProvider;

	/**
	 * This creates an adapter for a {@link frameweb.AttributeMappingKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeMappingKindAdapter() {
		if (attributeMappingKindItemProvider == null) {
			attributeMappingKindItemProvider = new AttributeMappingKindItemProvider(this);
		}

		return attributeMappingKindItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (framewebItemProvider != null) framewebItemProvider.dispose();
		if (frameworkItemProvider != null) frameworkItemProvider.dispose();
		if (domainModelItemProvider != null) domainModelItemProvider.dispose();
		if (navigationModelItemProvider != null) navigationModelItemProvider.dispose();
		if (applicationModelItemProvider != null) applicationModelItemProvider.dispose();
		if (persistenceModelItemProvider != null) persistenceModelItemProvider.dispose();
		if (domainAssociationItemProvider != null) domainAssociationItemProvider.dispose();
		if (versionAttributeItemProvider != null) versionAttributeItemProvider.dispose();
		if (idAttributeItemProvider != null) idAttributeItemProvider.dispose();
		if (lobAttributeItemProvider != null) lobAttributeItemProvider.dispose();
		if (embeddedAttributeItemProvider != null) embeddedAttributeItemProvider.dispose();
		if (decimalAttributeItemProvider != null) decimalAttributeItemProvider.dispose();
		if (dateTimeAttributeItemProvider != null) dateTimeAttributeItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (templateItemProvider != null) templateItemProvider.dispose();
		if (daoInterfaceItemProvider != null) daoInterfaceItemProvider.dispose();
		if (daoClassItemProvider != null) daoClassItemProvider.dispose();
		if (daoRealizationItemProvider != null) daoRealizationItemProvider.dispose();
		if (frontControllerClassItemProvider != null) frontControllerClassItemProvider.dispose();
		if (ioParameterItemProvider != null) ioParameterItemProvider.dispose();
		if (resultDependencyItemProvider != null) resultDependencyItemProvider.dispose();
		if (navigationAssociationItemProvider != null) navigationAssociationItemProvider.dispose();
		if (frontControllerMethodItemProvider != null) frontControllerMethodItemProvider.dispose();
		if (serviceClassItemProvider != null) serviceClassItemProvider.dispose();
		if (serviceInterfaceItemProvider != null) serviceInterfaceItemProvider.dispose();
		if (serviceGeneralizationItemProvider != null) serviceGeneralizationItemProvider.dispose();
		if (serviceNavigationAssociationItemProvider != null) serviceNavigationAssociationItemProvider.dispose();
		if (domainClassItemProvider != null) domainClassItemProvider.dispose();
		if (constantNameItemProvider != null) constantNameItemProvider.dispose();
		if (domainTableNameItemProvider != null) domainTableNameItemProvider.dispose();
		if (frameWorkNameItemProvider != null) frameWorkNameItemProvider.dispose();
		if (domainColumnNameItemProvider != null) domainColumnNameItemProvider.dispose();
		if (daoInterfaceNameItemProvider != null) daoInterfaceNameItemProvider.dispose();
		if (daoClassNameItemProvider != null) daoClassNameItemProvider.dispose();
		if (resultItemProvider != null) resultItemProvider.dispose();
		if (frontControllerDependencyItemProvider != null) frontControllerDependencyItemProvider.dispose();
		if (pageDependencyItemProvider != null) pageDependencyItemProvider.dispose();
		if (chainingDependencyItemProvider != null) chainingDependencyItemProvider.dispose();
		if (daoServiceAssociationItemProvider != null) daoServiceAssociationItemProvider.dispose();
		if (domainMethodItemProvider != null) domainMethodItemProvider.dispose();
		if (daoAttributeItemProvider != null) daoAttributeItemProvider.dispose();
		if (serviceOperationItemProvider != null) serviceOperationItemProvider.dispose();
		if (serviceAttributeItemProvider != null) serviceAttributeItemProvider.dispose();
		if (daoMethodItemProvider != null) daoMethodItemProvider.dispose();
		if (domainPackageItemProvider != null) domainPackageItemProvider.dispose();
		if (viewPackageItemProvider != null) viewPackageItemProvider.dispose();
		if (controllerPackageItemProvider != null) controllerPackageItemProvider.dispose();
		if (persistencePackageItemProvider != null) persistencePackageItemProvider.dispose();
		if (applicationPackageItemProvider != null) applicationPackageItemProvider.dispose();
		if (uiComponentItemProvider != null) uiComponentItemProvider.dispose();
		if (resultTypeItemProvider != null) resultTypeItemProvider.dispose();
		if (domainGeneralizationItemProvider != null) domainGeneralizationItemProvider.dispose();
		if (jQueryItemProvider != null) jQueryItemProvider.dispose();
		if (tagLibItemProvider != null) tagLibItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (anotationItemProvider != null) anotationItemProvider.dispose();
		if (navigationCompositionPartItemProvider != null) navigationCompositionPartItemProvider.dispose();
		if (navigationCompositionWholeItemProvider != null) navigationCompositionWholeItemProvider.dispose();
		if (resultSetItemProvider != null) resultSetItemProvider.dispose();
		if (pageConstraintItemProvider != null) pageConstraintItemProvider.dispose();
		if (resultConstraintItemProvider != null) resultConstraintItemProvider.dispose();
		if (methodCosntraintItemProvider != null) methodCosntraintItemProvider.dispose();
		if (chainingConstraintItemProvider != null) chainingConstraintItemProvider.dispose();
		if (navigationGeneralizationItemProvider != null) navigationGeneralizationItemProvider.dispose();
		if (domainConstraintsItemProvider != null) domainConstraintsItemProvider.dispose();
		if (domainPropertyItemProvider != null) domainPropertyItemProvider.dispose();
		if (daoGeneralizationItemProvider != null) daoGeneralizationItemProvider.dispose();
		if (mappingSetItemProvider != null) mappingSetItemProvider.dispose();
		if (classMappingKindItemProvider != null) classMappingKindItemProvider.dispose();
		if (attributeMappingKindItemProvider != null) attributeMappingKindItemProvider.dispose();
	}

}
